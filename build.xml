<?xml version="1.0"?>
<project name="Chess" default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <property name="jar.file" value="${ant.project.name}.jar"/>
  <property name="src.dir" value="src"/>
  <property name="build.dir" value="build"/>
  <property name="dist.dir" value="dist"/>
  <property name="test.dir" value="test"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="test.classes.dir" value="${build.dir}/test"/>
  <property name="applet.html" value="applet.html"/>

  <target name="init">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
    <exec executable="git" outputproperty="version"
          resultproperty="git.status" failifexecutionfails="false">
      <arg value="describe"/>
    </exec>
    <condition property="append.version" value="-${version}" else="">
      <and>
        <isset property="version"/>
        <equals arg1="${git.status}" arg2="0"/>
      </and>
    </condition>
    <property name="version" value=""/>
    <echo file="${build.classes.dir}/version.txt" message="${version}"/>
  </target>

  <target name="resolve" description="Retrieve dependencies with Ivy.">
    <ivy:resolve log="quiet"/>
    <ivy:cachepath conf="build" pathid="build.classpath"/>
    <ivy:cachepath conf="default" pathid="runtime.classpath"/>
    <ivy:cachefileset conf="default" setid="runtime.fileset"/>
    <ivy:cachepath conf="test" pathid="test.classpath"/>
    <ivy:cachepath conf="analysis" pathid="analysis.classpath"/>
  </target>

  <target name="compile" depends="init,resolve"
          description="Compile all source files.">
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}"
           optimize="on" debug="on" deprecation="on"
           includeantruntime="false">
      <classpath refid="build.classpath"/>
      <compilerarg value="-Xlint"/>
    </javac>
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="jar" depends="compile"
          description="Generate the jarfile distributable.">
    <jar destfile="${dist.dir}/${jar.file}">
      <fileset dir="${build.classes.dir}"/>
      <fileset file="UNLICENSE"/>
      <fileset file="README"/>
      <zipgroupfileset refid="runtime.fileset"/>
      <manifest>
        <attribute name="Main-Class" value="com.nullprogram.chess.Chess"/>
      </manifest>
    </jar>
    <copy file="${applet.html}" todir="${dist.dir}"/>
    <replace file="${dist.dir}/${applet.html}"
             token="$VERSION" value="${version}"/>
  </target>

  <target name="run" depends="jar" description="Run the application.">
    <java jar="${dist.dir}/${jar.file}" fork="true">
      <jvmarg line="-server -Xdebug -Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=n"/>
    </java>
  </target>

  <target name="hotswap" depends="compile">
    <taskdef name="hotswap" classname="dak.ant.taskdefs.Hotswap"/>
    <hotswap verbose="true" port="9000">
      <fileset dir="${build.classes.dir}" includes="**/*.class">
        <modified/>
      </fileset>
    </hotswap>
  </target>

  <target name="ga" depends="compile" description="Run genetic algorithm.">
    <java classpath="${build.classes.dir}" fork="true"
          classname="com.nullprogram.chess.ai.OptimizeGA">
      <jvmarg value="-server"/>
    </java>
  </target>

  <target name="clean" description="Delete all generated files.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <target name="format" description="Run the indenter on all source files.">
    <apply executable="astyle">
      <arg value="--mode=java"/>
      <arg value="--suffix=none"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </apply>
  </target>

  <target name="check" depends="resolve">
    <taskdef resource="checkstyletask.properties"
             classpathref="analysis.classpath"/>
    <checkstyle config="checkstyle.xml">
      <fileset dir="${src.dir}" includes="**/*.java"/>
    </checkstyle>
  </target>

  <target name="javadoc" description="Generate Javadoc HTML.">
    <javadoc destdir="${dist.dir}/javadoc">
      <fileset dir="src" includes="**/*.java"/>
    </javadoc>
    <zip destfile="${dist.dir}/javadoc.zip" basedir="${dist.dir}/javadoc"/>
  </target>

  <target name="tags" description="Generate a TAGS file for your editor.">
    <delete file="TAGS"/>
    <apply executable="etags">
      <arg value="-a"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </apply>
  </target>

  <target name="applet" depends="jar" description="Run the applet version.">
    <exec executable="appletviewer">
      <arg value="${dist.dir}/${applet.html}"/>
    </exec>
  </target>

  <target name="exe" depends="jar"
          description="Create a Windows .exe wrapper.">
    <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"/>
    <launch4j configFile="launch4j.xml"/>
  </target>

  <target name="dist" depends="exe,javadoc">
    <exec executable="git">
      <arg value="archive"/>
      <arg value="--prefix=Chess-src${append.version}/"/>
      <arg value="--output=${dist.dir}/Chess-src${append.version}.zip"/>
      <arg value="HEAD"/>
    </exec>
    <exec executable="makensis">
      <arg value="-DVERSION=${version}"/>
      <arg value="chess.nsi"/>
    </exec>
  </target>

  <target name="pmd" depends="resolve">
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
             classpathref="analysis.classpath"/>
    <pmd>
      <ruleset>pmd.xml</ruleset>
      <formatter type="emacs" toConsole="true"/>
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </pmd>
  </target>

  <target name="findbugs" depends="compile" description="Run FindBugs.">
    <taskdef classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
             name="findbugs" classpathref="analysis.classpath"/>
    <findbugs output="emacs" classpathref="analysis.classpath" pluginList="">
      <auxclasspath refid="analysis.classpath"/>
      <sourcepath path="${src.dir}"/>
      <class location="${build.dir}/classes"/>
    </findbugs>
  </target>

  <!-- JUnit -->

  <target name="test-compile" depends="compile">
    <mkdir dir="${test.classes.dir}"/>
    <javac srcdir="${test.dir}" destdir="${test.classes.dir}"
           classpath="${build.classes.dir}" includeantruntime="yes">
      <classpath refid="build.classpath"/>
      <compilerarg value="-Xlint"/>
    </javac>
  </target>

  <target name="test" depends="test-compile" description="Run all tests.">
    <junit fork="true">
      <classpath>
        <pathelement path="${build.classes.dir}"/>
        <pathelement path="${test.classes.dir}"/>
        <path refid="test.classpath"/>
      </classpath>
      <batchtest>
        <formatter type="brief" usefile="false"/>
        <fileset dir="${test.classes.dir}"/>
      </batchtest>
    </junit>
  </target>
</project>
